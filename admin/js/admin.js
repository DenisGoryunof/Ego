// –ü—Ä–æ—Å—Ç–∞—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –±–µ–∑ —Å–ª–æ–∂–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
class AdminPanel {
    constructor() {
        this.init();
    }

    init() {
        this.checkSimpleAuth();
        this.initEventListeners();
        this.loadDashboard();
    }

    checkSimpleAuth() {
        // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –µ—Å–ª–∏ –µ—Å—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä ?admin –≤ URL –∏–ª–∏ –≤ localStorage
        const urlParams = new URLSearchParams(window.location.search);
        const isAdmin = urlParams.has('admin') || localStorage.getItem('simple_admin') === 'true';
        
        if (!isAdmin && !window.location.pathname.includes('login.html')) {
            window.location.href = 'login.html';
            return;
        }
        
        if (isAdmin && window.location.pathname.includes('login.html')) {
            window.location.href = 'index.html';
        }
    }

    initEventListeners() {
        // Login form
        const loginForm = document.getElementById('adminLoginForm');
        if (loginForm) {
            loginForm.addEventListener('submit', (e) => this.handleSimpleLogin(e));
        }

        // Logout
        const logoutBtn = document.querySelector('[data-action="logout"]');
        if (logoutBtn) {
            logoutBtn.addEventListener('click', () => this.logout());
        }

        // –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
        document.addEventListener('click', (e) => {
            if (e.target.closest('[data-action]')) {
                const action = e.target.closest('[data-action]').dataset.action;
                this.handleAction(action);
            }
        });
    }

    handleSimpleLogin(e) {
        e.preventDefault();
        
        const username = document.getElementById('username').value;
        const password = document.getElementById('password').value;

        // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –ª—é–±–æ–π –ø–∞—Ä–æ–ª—å —Ä–∞–±–æ—Ç–∞–µ—Ç
        if (username === 'admin') {
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ—Å—Ç–æ–π —Ñ–ª–∞–≥ –¥–æ—Å—Ç—É–ø–∞
            localStorage.setItem('simple_admin', 'true');
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
            this.showMessage('–í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!', 'success');
            
            // –ü–µ—Ä–µ—Ö–æ–¥–∏–º —á–µ—Ä–µ–∑ —Å–µ–∫—É–Ω–¥—É
            setTimeout(() => {
                window.location.href = 'index.html?admin=true';
            }, 1000);
        } else {
            this.showMessage('–í–≤–µ–¥–∏—Ç–µ "admin" –≤ –ø–æ–ª–µ –ª–æ–≥–∏–Ω–∞', 'error');
        }
    }

    logout() {
        localStorage.removeItem('simple_admin');
        window.location.href = 'login.html';
    }

    showMessage(message, type = 'success') {
        // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        const messageDiv = document.createElement('div');
        messageDiv.style.cssText = `
            position: fixed;
            top: 20px;
            right: 20px;
            padding: 15px 20px;
            background: ${type === 'success' ? '#27ae60' : '#e74c3c'};
            color: white;
            border-radius: 5px;
            z-index: 1000;
            font-weight: bold;
        `;
        messageDiv.textContent = message;
        
        document.body.appendChild(messageDiv);
        
        // –£–¥–∞–ª—è–µ–º —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
        setTimeout(() => {
            document.body.removeChild(messageDiv);
        }, 3000);
    }

    async loadDashboard() {
        if (!window.location.pathname.includes('index.html')) return;

        // –ó–∞–≥—Ä—É–∂–∞–µ–º mock –¥–∞–Ω–Ω—ã–µ
        this.loadStatistics();
        this.loadRecentBookings();
        this.loadServices();
    }

    loadStatistics() {
        // Mock –¥–∞–Ω–Ω—ã–µ
        const stats = {
            totalBookings: 1247,
            activeClients: 584,
            monthlyRevenue: 284500,
            pendingApprovals: 12
        };

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        document.getElementById('total-bookings').textContent = stats.totalBookings;
        document.getElementById('active-clients').textContent = stats.activeClients;
        document.getElementById('monthly-revenue').textContent = this.formatCurrency(stats.monthlyRevenue);
        document.getElementById('pending-approvals').textContent = stats.pendingApprovals;
    }

    loadRecentBookings() {
        const bookings = [
            { id: 1, client: '–ê–Ω–Ω–∞ –ò–≤–∞–Ω–æ–≤–∞', service: '–õ–∞–∑–µ—Ä–Ω–∞—è —ç–ø–∏–ª—è—Ü–∏—è', date: '2024-01-15 14:00', status: 'confirmed' },
            { id: 2, client: '–ú–∞—Ä–∏—è –ü–µ—Ç—Ä–æ–≤–∞', service: '–ú–æ–º–µ–Ω—Ç–∞–ª—å–Ω—ã–π –∑–∞–≥–∞—Ä', date: '2024-01-15 15:30', status: 'pending' },
            { id: 3, client: '–ï–ª–µ–Ω–∞ –°–∏–¥–æ—Ä–æ–≤–∞', service: '–ú–∞–Ω–∏–∫—é—Ä', date: '2024-01-15 16:00', status: 'confirmed' }
        ];

        this.renderBookingsTable(bookings);
    }

    renderBookingsTable(bookings) {
        const tbody = document.querySelector('#bookings-table tbody');
        if (!tbody) return;

        tbody.innerHTML = bookings.map(booking => `
            <tr>
                <td>${booking.id}</td>
                <td>${booking.client}</td>
                <td>${booking.service}</td>
                <td>${this.formatDate(booking.date)}</td>
                <td>${this.getStatusText(booking.status)}</td>
                <td>
                    <button class="btn btn-sm" onclick="admin.editBooking(${booking.id})">‚úèÔ∏è</button>
                    <button class="btn btn-sm btn-danger" onclick="admin.deleteBooking(${booking.id})">üóëÔ∏è</button>
                </td>
            </tr>
        `).join('');
    }

    loadServices() {
        const services = [
            { id: 1, name: '–õ–∞–∑–µ—Ä–Ω–∞—è —ç–ø–∏–ª—è—Ü–∏—è', price: 2500, duration: '60 –º–∏–Ω', category: '–≠–ø–∏–ª—è—Ü–∏—è' },
            { id: 2, name: '–ú–æ–º–µ–Ω—Ç–∞–ª—å–Ω—ã–π –∑–∞–≥–∞—Ä', price: 2000, duration: '30 –º–∏–Ω', category: '–ó–∞–≥–∞—Ä' },
            { id: 3, name: '–ú–∞–Ω–∏–∫—é—Ä', price: 1500, duration: '45 –º–∏–Ω', category: '–ù–æ–≥—Ç–∏' }
        ];

        this.renderServicesTable(services);
    }

    renderServicesTable(services) {
        const tbody = document.querySelector('#services-table tbody');
        if (!tbody) return;

        tbody.innerHTML = services.map(service => `
            <tr>
                <td>${service.id}</td>
                <td>${service.name}</td>
                <td>${service.category}</td>
                <td>${this.formatCurrency(service.price)}</td>
                <td>${service.duration}</td>
                <td>
                    <button class="btn btn-sm" onclick="admin.editService(${service.id})">‚úèÔ∏è</button>
                    <button class="btn btn-sm btn-danger" onclick="admin.deleteService(${service.id})">üóëÔ∏è</button>
                </td>
            </tr>
        `).join('');
    }

    handleAction(action) {
        switch (action) {
            case 'add-booking':
                this.addBooking();
                break;
            case 'add-service':
                this.addService();
                break;
            case 'export-data':
                this.exportData();
                break;
        }
    }

    addBooking() {
        const client = prompt('–ò–º—è –∫–ª–∏–µ–Ω—Ç–∞:');
        if (client) {
            this.showMessage('–ó–∞–ø–∏—Å—å –¥–æ–±–∞–≤–ª–µ–Ω–∞!', 'success');
            this.loadRecentBookings();
        }
    }

    addService() {
        const service = prompt('–ù–∞–∑–≤–∞–Ω–∏–µ —É—Å–ª—É–≥–∏:');
        if (service) {
            this.showMessage('–£—Å–ª—É–≥–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!', 'success');
            this.loadServices();
        }
    }

    editBooking(id) {
        alert(`–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ #${id}`);
    }

    deleteBooking(id) {
        if (confirm('–£–¥–∞–ª–∏—Ç—å —ç—Ç—É –∑–∞–ø–∏—Å—å?')) {
            this.showMessage('–ó–∞–ø–∏—Å—å —É–¥–∞–ª–µ–Ω–∞!', 'success');
        }
    }

    editService(id) {
        alert(`–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ª—É–≥–∏ #${id}`);
    }

    deleteService(id) {
        if (confirm('–£–¥–∞–ª–∏—Ç—å —ç—Ç—É —É—Å–ª—É–≥—É?')) {
            this.showMessage('–£—Å–ª—É–≥–∞ —É–¥–∞–ª–µ–Ω–∞!', 'success');
        }
    }

    exportData() {
        this.showMessage('–î–∞–Ω–Ω—ã–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã!', 'success');
    }

    formatCurrency(amount) {
        return amount.toLocaleString('ru-RU') + ' ‚ÇΩ';
    }

    formatDate(dateString) {
        return new Date(dateString).toLocaleString('ru-RU');
    }

    getStatusText(status) {
        const statuses = {
            'pending': '‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ',
            'confirmed': '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ',
            'cancelled': '‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ'
        };
        return statuses[status] || status;
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
const admin = new AdminPanel();